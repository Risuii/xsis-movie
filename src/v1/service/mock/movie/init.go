// Code generated by MockGen. DO NOT EDIT.
// Source: movie/init.go
//
// Generated by this command:
//
//	mockgen -source=movie/init.go -destination=mock/movie/init.go
//
// Package mock_movie is a generated GoMock package.
package mock_movie

import (
	context "context"
	reflect "reflect"

	entity "github.com/Risuii/movie/src/entity"
	contract "github.com/Risuii/movie/src/v1/contract"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieRepository) Create(ctx context.Context, data *entity.Movie) (contract.MovieResponseDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(contract.MovieResponseDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMovieRepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieRepository)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockMovieRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovieRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMovieRepository) Get(ctx context.Context, id int) (entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMovieRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMovieRepository)(nil).Get), ctx, id)
}

// GetList mocks base method.
func (m *MockMovieRepository) GetList(ctx context.Context, params contract.GetListParam) ([]*entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, params)
	ret0, _ := ret[0].([]*entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockMovieRepositoryMockRecorder) GetList(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockMovieRepository)(nil).GetList), ctx, params)
}

// GetMovieCount mocks base method.
func (m *MockMovieRepository) GetMovieCount(ctx context.Context, param contract.GetListParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieCount", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieCount indicates an expected call of GetMovieCount.
func (mr *MockMovieRepositoryMockRecorder) GetMovieCount(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieCount", reflect.TypeOf((*MockMovieRepository)(nil).GetMovieCount), ctx, param)
}

// Update mocks base method.
func (m *MockMovieRepository) Update(ctx context.Context, data *entity.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieRepositoryMockRecorder) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieRepository)(nil).Update), ctx, data)
}
